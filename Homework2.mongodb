// ========================Exercise Part A=============================

// 1- creating a db
use _employees_

// 2- list all dbs
>show dbs

// Drop Database
>db.dropDatabase()

// ========================Exercise Part B=============================

// 1- Create db, add collection, drop db, show dbs before and after

// create and switch to new db
>use _temporary_
// create new collection
>db.createCollection('_test_')
// show list of dbs
>show dbs
// show list of collections
>show collections
// drop db
>db.dropDatabase()
// show list of dbs after
>show dbs
// show list of collections after
>show collections

// 2- Create multiple collections using distinct department names in the database created in **exercise Part A**
>use _employees_
>db.createCollection("dep1")
>db.createCollection("dep2")
>db.createCollection("dep3")

// 3- List all the collections in the current database
>show dbs

// ========================Exercise Part C=============================

// 1- Insert some employee documents with fields(employeeid, name, salary) in the multiple collections created in the previuos exercise.
>db.dep1.insert(
{
    employeeid: 1,
    name: "John Parker",
    salary: 70000
})
>db.dep2.insert(
{
    employeeid: 1,
    name: "Leo Sam",
    salary: 100000
})
>db.dep3.insert(
{
    employeeid: 1,
    name: "Auon Aoun",
    salary: 85000
})

// 2- Use the find command to retrieve all the entered data.
>db.dep1.find()
>db.dep2.find()
>db.dep3.find()


// ========================Exercise Part D=============================

// 1.  Add the follwoing employees to any collection:
>db.dep1.insert({
        employeeid: 1187,
        name: "John Steight",
        salary: 75000
    })
>db.dep1.insert({
        employeeid: 2455,
        name: "Syed",
        salary: 90000
    })
>db.dep1.insert({
        employeeid: 24113,
        name: "Wright John",
        salary: 65000
})

// 2. Find 2 documents using the field name **employeeid**
>db.dep1.find({employeeid: 2455})
>db.dep1.find({employeeid: 1187})

// 3. Find 2 documents using the field name **name**
>db.dep1.find({name: "Syed"})
>db.dep1.find({name: "Wright John"})

// 4. Find all the documents where the name field starts with John
>db.dep1.find({ name: /^John/ })


// 5. Find all the documents where the name filed contains John
>db.dep1.find({ name: /John/ })

// ========================Exercise Part E=============================

// 1- Get all cities with a _population of less than 1500_
>db.zips.find({
pop: { $lt: 1500 }
})

// 2- Find all data for the city _CHESTER_ using query operator
>db.zips.find({
city: "CHESTER"
})

// 3- Use array query operator to find entries for the location at _\-84.38570799999999, 45.015207_
>db.zips.find({
loc: [-84.38570799999999, 45.015207]
})

// 4- Use a logical operator to find all entries that match the city WARREN or location -80.76424299999999, 41.231819
>db.zips.find({
$or:[
  {city: "WARREN"},
  {loc: [-80.76424299999999, 41.231819]}
]
})

// ========================Exercise Part F=============================

// 1- Use the $where operator to find all employess who have a salary > 75000
> db.dep1.find({ $where: "this.salary > 75000" })

// 2- Use the $where operator to find employees where the name contains John
> db.dep1.find({ $where: "this.name.includes('John')" })