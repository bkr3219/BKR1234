// =============================Exercise Part A=========================================

// creating a db 
<switched to db _employees_

// list all dbs
<sample_mflix  111.61 MiB
test          184.00 KiB
admin         364.00 KiB
local           6.98 GiB

// Drop Database
<{ ok: 1, dropped: 'tutorial' }

// =================================Exercise Part B=====================================


// 1- Create db, show dbs, add collection, drop db,  before and after

// create and switch to new db
<switched to db _temporary_
// create new collection
<{ ok: 1 }
// show list of dbs
<_temporary_     8.00 KiB
sample_mflix  111.61 MiB
test          184.00 KiB
admin         364.00 KiB
local           6.98 GiB
// show list of collections
<_test_
// drop db
<{ ok: 1, dropped: '_temporary_' }
// show list of dbs after
<sample_mflix  111.61 MiB
test          184.00 KiB
admin         364.00 KiB
local           6.98 GiB
// show list of collections after
<

// 2- Create multiple collections using distinct department names in the database created in **exercise Part A**
<switched to db _employees_
<{ ok: 1 }
<{ ok: 1 }
<{ ok: 1 }


// 3- List all the collections in the current database
<_employees_    24.00 KiB
sample_mflix  111.61 MiB
test          184.00 KiB
admin         364.00 KiB
local           6.98 GiB


// ========================Exercise Part C=============================

// 1- Insert some employee documents with fields(employeeid, name, salary) in the multiple collections created in the previuos exercise.
<{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('662657950ddcd3288d72622a')
  }
}
<{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('662658040ddcd3288d72622b')
  }
}
<{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('6626584f0ddcd3288d72622c')
  }
}

// 2- Use the find command to retrieve all the entered data.
<{
  _id: ObjectId('662657950ddcd3288d72622a'),
  employeeid: 1,
  name: 'John Parker',
  salary: 70000
}
<{
  _id: ObjectId('662658040ddcd3288d72622b'),
  employeeid: 1,
  name: 'Leo Sam',
  salary: 100000
}
<{
  _id: ObjectId('6626584f0ddcd3288d72622c'),
  employeeid: 1,
  name: 'Auon Aoun',
  salary: 85000
}


// ========================Exercise Part D=============================

// 1.  Add the follwoing employees to any collection:
<{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('6627300b35efd9f054604c16')
  }
}
<{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('6627302a35efd9f054604c17')
  }
}
<{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('6627304135efd9f054604c18')
  }
}

// 2. Find 2 documents using the field name **employeeid**
<{
  _id: ObjectId('6627302a35efd9f054604c17'),
  employeeid: 2455,
  name: 'Syed',
  salary: 90000
}
<{
  _id: ObjectId('6627300b35efd9f054604c16'),
  employeeid: 1187,
  name: 'John Steight',
  salary: 75000
}

// 3. Find 2 documents using the field name **name**
<{
  _id: ObjectId('6627302a35efd9f054604c17'),
  employeeid: 2455,
  name: 'Syed',
  salary: 90000
}
<{
  _id: ObjectId('6627304135efd9f054604c18'),
  employeeid: 24113,
  name: 'Wright John',
  salary: 65000
}

// 4. Find all the documents where the name field starts with John
<{
  _id: ObjectId('662657950ddcd3288d72622a'),
  employeeid: 1,
  name: 'John Parker',
  salary: 70000
}
{
  _id: ObjectId('6627300b35efd9f054604c16'),
  employeeid: 1187,
  name: 'John Steight',
  salary: 75000
}

// 5. Find all the documents where the name filed contains John
<{
  _id: ObjectId('662657950ddcd3288d72622a'),
  employeeid: 1,
  name: 'John Parker',
  salary: 70000
}
{
  _id: ObjectId('6627300b35efd9f054604c16'),
  employeeid: 1187,
  name: 'John Steight',
  salary: 75000
}
{
  _id: ObjectId('6627304135efd9f054604c18'),
  employeeid: 24113,
  name: 'Wright John',
  salary: 65000
}


// ========================Exercise Part E=============================

// 1- Get all cities with a _population of less than 1500_
<{
  _id: '01008',
  city: 'BLANDFORD',
  loc: [
    -72.936114,
    42.182949
  ],
  pop: 1240,
  state: 'MA'
}
{
  _id: '01012',
  city: 'CHESTERFIELD',
  loc: [
    -72.833309,
    42.38167
  ],
  pop: 177,
  state: 'MA'
}
{
  _id: '01026',
  city: 'CUMMINGTON',
  loc: [
    -72.905767,
    42.435296
  ],
  pop: 1484,
  state: 'MA'
}
{
  _id: '01032',
  city: 'GOSHEN',
  loc: [
    -72.844092,
    42.466234
  ],
  pop: 122,
  state: 'MA'
}
{
  _id: '01039',
  city: 'HAYDENVILLE',
  loc: [
    -72.703178,
    42.381799
  ],
  pop: 1387,
  state: 'MA'
}
{
  _id: '01053',
  city: 'LEEDS',
  loc: [
    -72.703403,
    42.354292
  ],
  pop: 1350,
  state: 'MA'
}
{
  _id: '01070',
  city: 'PLAINFIELD',
  loc: [
    -72.918289,
    42.514393
  ],
  pop: 571,
  state: 'MA'
}
Type "it" for more

// 2- Find all data for the city _CHESTER_ using query operator
<{
  _id: '01011',
  city: 'CHESTER',
  loc: [
    -72.988761,
    42.279421
  ],
  pop: 1688,
  state: 'MA'
}
{
  _id: '03036',
  city: 'CHESTER',
  loc: [
    -71.244962,
    42.967756
  ],
  pop: 2691,
  state: 'NH'
}
{
  _id: '05143',
  city: 'CHESTER',
  loc: [
    -72.603125,
    43.283124
  ],
  pop: 3449,
  state: 'VT'
}
{
  _id: '06412',
  city: 'CHESTER',
  loc: [
    -72.464293,
    41.404903
  ],
  pop: 3417,
  state: 'CT'
}
{
  _id: '07930',
  city: 'CHESTER',
  loc: [
    -74.677649,
    40.789193
  ],
  pop: 6635,
  state: 'NJ'
}
{
  _id: '10918',
  city: 'CHESTER',
  loc: [
    -74.265116,
    41.355381
  ],
  pop: 9196,
  state: 'NY'
}
{
  _id: '19013',
  city: 'CHESTER',
  loc: [
    -75.374687,
    39.849817
  ],
  pop: 49144,
  state: 'PA'
}
{
  _id: '21619',
  city: 'CHESTER',
  loc: [
    -76.284183,
    38.958296
  ],
  pop: 4199,
  state: 'MD'
}
Type "it" for more

// 3- Use array query operator to find entries for the location at _\-84.38570799999999, 45.015207_
<{
  _id: '49751',
  city: 'JOHANNESBURG',
  loc: [
    -84.385708,
    45.015207
  ],
  pop: 2062,
  state: 'MI'
}


// 4- Use a logical operator to find all entries that match the city WARREN or location -80.76424299999999, 41.231819
<{
  _id: '02885',
  city: 'WARREN',
  loc: [
    -71.270165,
    41.725618
  ],
  pop: 11385,
  state: 'RI'
}
{
  _id: '03279',
  city: 'WARREN',
  loc: [
    -71.89013,
    43.944667
  ],
  pop: 886,
  state: 'NH'
}
{
  _id: '04864',
  city: 'WARREN',
  loc: [
    -69.247894,
    44.127066
  ],
  pop: 2816,
  state: 'ME'
}
{
  _id: '06754',
  city: 'WARREN',
  loc: [
    -73.367472,
    41.770084
  ],
  pop: 1278,
  state: 'CT'
}
{
  _id: '07059',
  city: 'WARREN',
  loc: [
    -74.510456,
    40.631787
  ],
  pop: 10867,
  state: 'NJ'
}
{
  _id: '44481',
  city: 'WARREN',
  loc: [
    -80.871806,
    41.172426
  ],
  pop: 5407,
  state: 'OH'
}
{
  _id: '44483',
  city: 'WARREN',
  loc: [
    -80.816448,
    41.263878
  ],
  pop: 30257,
  state: 'OH'
}
{
  _id: '44484',
  city: 'WARREN',
  loc: [
    -80.764243,
    41.231819
  ],
  pop: 25898,
  state: 'OH'
}
{
  _id: '44485',
  city: 'WARREN',
  loc: [
    -80.844136,
    41.240511
  ],
  pop: 24847,
  state: 'OH'
}
{
  _id: '46792',
  city: 'WARREN',
  loc: [
    -85.418337,
    40.688646
  ],
  pop: 2404,
  state: 'IN'
}
{
  _id: '48089',
  city: 'WARREN',
  loc: [
    -82.997385,
    42.468494
  ],
  pop: 35861,
  state: 'MI'
}
{
  _id: '48091',
  city: 'WARREN',
  loc: [
    -83.059263,
    42.466463
  ],
  pop: 33165,
  state: 'MI'
}
{
  _id: '48092',
  city: 'WARREN',
  loc: [
    -83.064278,
    42.512459
  ],
  pop: 25781,
  state: 'MI'
}
{
  _id: '48093',
  city: 'WARREN',
  loc: [
    -82.996764,
    42.514943
  ],
  pop: 50327,
  state: 'MI'
}
{
  _id: '61087',
  city: 'WARREN',
  loc: [
    -89.985992,
    42.489001
  ],
  pop: 1967,
  state: 'IL'
}
{
  _id: '71671',
  city: 'WARREN',
  loc: [
    -92.077824,
    33.613983
  ],
  pop: 8828,
  state: 'AR'
}
{
  _id: '77664',
  city: 'WARREN',
  loc: [
    -94.411974,
    30.597776
  ],
  pop: 2465,
  state: 'TX'
}
{
  _id: '97053',
  city: 'WARREN',
  loc: [
    -122.863445,
    45.826043
  ],
  pop: 2378,
  state: 'OR'
}


// ========================Exercise Part F=============================

// 1- Use the $where operator to find all employess who have a salary > 75000
< {
  _id: ObjectId('6627302a35efd9f054604c17'),
  employeeid: 2455,
  name: 'Syed',
  salary: 90000
}

// 2- Use the $where operator to find employees where the name contains John
< {
  _id: ObjectId('662657950ddcd3288d72622a'),
  employeeid: 1,
  name: 'John Parker',
  salary: 70000
}
{
  _id: ObjectId('6627300b35efd9f054604c16'),
  employeeid: 1187,
  name: 'John Steight',
  salary: 75000
}
{
  _id: ObjectId('6627304135efd9f054604c18'),
  employeeid: 24113,
  name: 'Wright John',
  salary: 65000
}